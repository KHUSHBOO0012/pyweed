language: python
python:
  - "3.6"

# This is copied from ObsPy: https://raw.githubusercontent.com/obspy/obspy/master/.travis.yml
install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      export OS="MacOSX";
    else
      export OS="Linux";
    fi
  - |
      if [[ "$ARCHITECTURE_32BIT" == "True" ]]; then
        export ARCH=""
        # OPT is used by setuptools patches contained in newer numpy versions
        # used by obspy when running pip install --no-deps .
        export OPT="-m32"
        # workaround for sudo dpkg --add-architecture i386
        # be sure multiarch is the only file in this directory
        ls /etc/dpkg/dpkg.cfg.d/
        # multiarch must contain foreign-architecture i386. If not it will
        # error later and you need to do the following and add sudo: true
        #sudo sh -c "echo 'foreign-architecture i386' > /etc/dpkg/dpkg.cfg.d/multiarch"
        cat /etc/dpkg/dpkg.cfg.d/multiarch
      else
        export ARCH="_64"
      fi
  - if [[ "${PYTHON_VERSION:0:1}" == '2' ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda2-latest-${OS}-x86${ARCH}.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-${OS}-x86${ARCH}.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a
  - 
  - |
      if [[ "$MINIMUM_DEPENDENCIES" == 'True' ]]; then
        NUMPY="numpy=1.6.2"
        SCIPY="scipy=0.11.0"
        MATPLOTLIB="matplotlib=1.1.1"
        # no basemap version works with this old numpy, so leave out
        BASEMAP=""
        PYPROJ="pyproj"
        # ancient matplotlib needs to be turned to AGG before anything else,
        # otherwise it tries to import incompatible version of Qt as a backend
        # and hick-ups..
        mkdir -p $HOME/.matplotlib
        echo 'backend:AGG' > $HOME/.matplotlib/matplotlibrc
      elif [[ "${PYTHON_VERSION}" == '3.3' ]]; then
        # Let conda resolve to the latest versions.
        NUMPY="numpy"
        SCIPY="scipy"
        MATPLOTLIB="matplotlib"
        BASEMAP="basemap"
        # anaconda doesn't provide pyproj for Python 3.3 anymore
        PYPROJ=""
      elif [[ "${PYTHON_VERSION}" == '3.4' ]]; then
        # 3.4 apparently no longer get's updated packages.
        # Let conda resolve to the latest versions.
        NUMPY="numpy"
        SCIPY="scipy"
        MATPLOTLIB="matplotlib"
        BASEMAP="basemap"
        PYPROJ="pyproj"
      elif [[ "$ARCHITECTURE_32BIT" == "True" ]]; then
        # Special packages for 32bit. Also let conda resolve to the latest
        # versions.
        NUMPY="numpy"
        SCIPY="scipy"
        MATPLOTLIB="matplotlib"
        BASEMAP="basemap"
        PYPROJ="pyproj"
      # For anything else also let conda resolve, but force matplotlib 2.
      else
        NUMPY="numpy"
        SCIPY="scipy"
        MATPLOTLIB="matplotlib>=2.0.0"
        BASEMAP="basemap"
        PYPROJ="pyproj"
      fi
  - conda create -q -n test-environment --file environment.yml
  - source activate test-environment
  - conda list
  # done installing dependencies
  - pip install --no-deps .
  - git status

